@model NurseCourse.Models.Exam

@{
    ViewData["Title"] = "Evaluar Examen";
    var userId = Context.Session.GetInt32("UserId");
}

<!-- Ocultar la barra de navegación -->
<style>
    .navbar {
        display: none;
    }
</style>

<div class="container my-5">
    <form id="examForm" method="post" class="border rounded shadow-lg p-5" style="background-color: #f9fafb;">
        <!-- Temporizador -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h5 class="text-secondary"><i class="bi bi-clock-history"></i> Tiempo Restante:</h5>
            <h4 id="timer" class="badge bg-danger fs-4" style="font-weight: 600; padding: 0.5rem 1rem;">20:00</h4>
        </div>

        <!-- Título del Examen -->
        <h2 class="mb-4 text-dark text-center"><i class="bi bi-journal-text"></i> @Model.Name</h2>
        <p class="text-muted mb-4 text-center">Completa las preguntas a continuación y presiona "Enviar Respuestas" al finalizar.</p>

        <!-- Identificación del usuario y del examen -->
        <input type="hidden" name="UserId" value="@userId" />
        <input type="hidden" name="ExamId" value="@Model.Id" />

        <!-- Preguntas -->
        <div class="mb-5">
            @foreach (var question in Model.Questions)
            {
                <div class="card border-light shadow-sm mb-4">
                    <div class="card-body">
                        <h5 class="card-title text-dark mb-3"><i class="bi bi-question-circle text-primary"></i> @question.QuestionText</h5>
                        @if (question.QuestionType == 1)
                        {
                            <input type="text" class="form-control mt-2 border-secondary" name="Answers[@question.Id]" placeholder="Escribe tu respuesta aquí" required />
                        }
                        else if (question.QuestionType == 2 && question.Options != null && question.Options.Any())
                        {
                            <div class="mt-3">
                                @foreach (var option in question.Options)
                                {
                                    <div class="form-check mb-2">
                                        <input type="radio" class="form-check-input" name="Answers[@question.Id]" value="@option.Id" id="option-@option.Id" required />
                                        <label class="form-check-label" for="option-@option.Id">
                                            @option.OptionText
                                        </label>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Botón de Envío -->
        <div class="text-center">
            <button type="button" class="btn btn-primary btn-lg" onclick="submitExam()" style="border-radius: 30px;">
                <i class="bi bi-send-check-fill"></i> Enviar Respuestas
            </button>
        </div>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Configuración del temporizador
    let timeLeft = 1200; // 20 minutos en segundos

    function startTimer() {
        const timerDisplay = document.getElementById('timer');
        const interval = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerDisplay.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            timeLeft--;

            if (timeLeft < 0) {
                clearInterval(interval);
                submitExam(); // Envía el examen automáticamente al finalizar el tiempo
            }
        }, 1000);
    }

    // Llama a startTimer al cargar la página
    window.onload = startTimer;

    function submitExam() {
        const form = document.getElementById('examForm');
        const formData = new FormData(form);

        fetch('@Url.Action("SubmitExam", "ExamAttempts")', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                Swal.fire({
                    title: 'Resultado del Examen',
                    text: `Tu puntaje es: ${data.score}%`,
                    icon: data.score >= 60 ? 'success' : 'error',
                    confirmButtonText: 'Aceptar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '@Url.Action("Index", "ExamAttempts")';
                    }
                });
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'Hubo un problema al enviar tus respuestas. Por favor, inténtalo de nuevo.',
                    icon: 'error',
                    confirmButtonText: 'Aceptar'
                });
            });
    }
</script>

<!-- Estilos adicionales para mejorar la presentación -->
<style>
    .card-title {
        font-weight: bold;
        font-size: 1.2rem;
    }

    .form-control, .form-check-input {
        border-radius: 5px;
        padding: 0.75rem;
        font-size: 1rem;
        border: 1px solid #ced4da;
    }

    .btn-primary {
        background-color: #4a90e2;
        border: none;
    }

        .btn-primary:hover {
            background-color: #357abd;
        }

    .form-check-label {
        font-size: 1rem;
        margin-left: 0.5rem;
    }

    .form-check-input {
        transform: scale(1.1);
        border: 1px solid #6c757d;
    }

    /* Estilo para el temporizador */
    #timer {
        padding: 0.25rem 1rem;
        border-radius: 25px;
    }

    /* Estilo para la tarjeta de preguntas */
    .card {
        border: 1px solid #e2e6ea;
        background-color: #ffffff;
    }
</style>
