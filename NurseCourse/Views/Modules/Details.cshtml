@model NurseCourse.Models.Module

@{
    ViewData["Title"] = "Details";
}

<div>
    <h3><b>@Html.DisplayFor(model => model.Name) - Curso: @Html.DisplayFor(model => model.Course.Name)</b></h3>
    <hr />
    <div class="container mt-4">
        <div class="row mb-3">
            <div class="col-10">
                <h4 class="fw-bold text-start">@Html.DisplayFor(model => model.Description)</h4>
            </div>
            <div class="col-2 text-end">
                @if (!string.IsNullOrEmpty(Model.PdfPath))
                {
                    <a class="btn btn-outline-danger" href="@Model.PdfPath" target="_blank">
                        Descargar PDF
                    </a>
                    @* <button id="loadPdfContent" data-pdf-path="@Model.PdfPath" hidden></button> *@
                }
            </div>
        </div>
        <div class="row justify-content-start mb-4">
            <div class="col-md-8">
                @if (!string.IsNullOrEmpty(Model.VideoPath))
                {
                    <div class="ratio ratio-16x9">
                        @Html.Raw(Model.VideoPath)
                    </div>
                }
                else
                {
                    <p class="text-start">No hay un video disponible.</p>
                }
            </div>
        </div>
@*         <div class="row">
            <div class="col-md-12" id="pdf-content">
                <p class="text-start">Cargando...</p>
            </div>
        </div> *@
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $('#loadPdfContent').click(function () {
            const pdfPath = $(this).data('pdf-path');

            $.ajax({
                url: '@Url.Action("GetPdfContent", "PDF")',
                type: 'POST',
                data: { pdfPath: pdfPath },
                success: function (response) {
                    $('#pdf-content').html('<pre>' + response.content + '</pre>');
                },
                error: function () {
                    $('#pdf-content').html('<p>Error al cargar el contenido del PDF.</p>');
                }
            });
        });

        setTimeout(function () {
            $('#loadPdfContent').trigger('click');
        }, 500);
    });
</script>

<!-- Sección para los exámenes -->
<div>
    <div class="d-flex justify-content-between align-items-center">
        <h4>Evaluaciones</h4>
        <button type="button" class="btn btn-outline-light" data-toggle="modal" data-target="#addExamModal">Agregar Examen</button>
    </div>

    <hr />
    <div class="row">
        @if (Model.Exams != null && Model.Exams.Any())
        {
            @foreach (var exam in Model.Exams)
            {
                <div class="col-12 col-md-6 mb-4">
                    <!-- Card del examen -->
                    <div class="card h-100" style="background-color: rgba(0, 0, 0, 0.4); color: white;">
                        <div class="card-body">
                            <h4 class="card-title text-light">Examen: @exam.Name</h4>
                            <hr class="bg-light" />

                            <!-- Sección de preguntas -->
                            @if (exam.Questions != null && exam.Questions.Any())
                            {
                                <h5 class="text-light">Preguntas:</h5>
                                @foreach (var question in exam.Questions.Distinct())
                                {
                                    <div class="mb-2">
                                        <p><strong class="text-white">Pregunta:</strong> @question.QuestionText</p>

                                        @if (question.QuestionType == 1)
                                        {
                                            <p><strong class="text-white">Respuesta Correcta:</strong> @question.CorrectAnswer</p>
                                        }
                                        else if (question.QuestionType == 2)
                                        {
                                            <ul class="text-white">
                                                @foreach (var option in question.Options.Distinct())
                                                {
                                                    <li>
                                                        @if (option.IsCorrect == true)
                                                        {
                                                            <strong>@option.OptionText (Correcta)</strong>
                                                        }
                                                        else
                                                        {
                                                            @option.OptionText
                                                        }
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </div>
                                    <hr class="bg-light" />
                                }
                            }

                            else
                            {
                                <p class="text-light">Este examen no tiene preguntas.</p>
                            }
                        </div>
                        <div class="card-footer text-right" style="background-color: rgba(0, 0, 0, 0.5);">
                            <button class="btn btn-outline-primary" data-toggle="modal" data-target="#editExamModal" onclick="loadExamForEdit(@exam.Id)">Editar</button>
                            <a href="javascript:void(0);" class="btn btn-outline-danger" onclick="confirmDelete('@exam.Id')">Eliminar</a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <p class="text-muted">Este módulo aún no tiene exámenes asignados.</p>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="addExamModal" tabindex="-1" role="dialog" aria-labelledby="addExamModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header bg-light shadow-sm">
                <h5 class="modal-title font-weight-bold" id="addExamModalLabel">Agregar Examen para @Model.Name</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body bg-white p-4">
                <form id="form-add-exam">
                    <!-- Nombre del Examen -->
                    <div class="form-group mb-4">
                        <label for="examName" class="font-weight-bold text-primary">Nombre del Examen</label>
                        <input id="examName" name="Name" type="text" class="form-control rounded-lg p-3 shadow-sm" placeholder="Escribe el nombre del examen" required />
                    </div>

                    <!-- Contenedor de Preguntas -->
                    <div id="questionsContainer" class="p-3 rounded-lg bg-light shadow-sm mb-4"></div>

                    <div class="form-group text-right mb-4">
                        <button type="button" class="btn btn-success" id="addQuestionButton">
                            + 
                        </button>
                    </div>

                    <input type="hidden" name="ModuleId" id="moduleId" value="@Model.Id" />

  
                    <div class="form-group text-right">
                        <button type="button" class="btn btn-primary" onclick="createExam(@Model.Id)">Crear Examen</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let questionCount = 0;
        let optionCounts = {}; 

        document.getElementById('addQuestionButton').addEventListener('click', function () {
            questionCount++;
            optionCounts[questionCount] = 0; 

            const questionHtml = `
                        <div class="question-group mt-3" id="question-${questionCount}">
                            <h3>Pregunta ${questionCount}</h3>
                            <div class="form-group">
                                <label for="questionText-${questionCount}">Texto de la Pregunta</label>
                                <input type="text" id="questionText-${questionCount}" name="Questions[${questionCount}].QuestionText" class="form-control" required />
                            </div>
                            <div class="form-group">
                                <label for="questionType-${questionCount}">Tipo de Pregunta</label>
                                <select id="questionType-${questionCount}" name="Questions[${questionCount}].QuestionType" class="form-control questionTypeSelect" data-question-id="${questionCount}">
                                    <option value="1">Normal</option>
                                    <option value="2">Selection</option>
                                </select>
                            </div>
                            <div class="form-group correct-answer-group" id="correctAnswerGroup-${questionCount}" style="display: none;">
                                <label for="correctAnswer-${questionCount}">Respuesta Correcta</label>
                                <input type="text" id="correctAnswer-${questionCount}" name="Questions[${questionCount}].CorrectAnswer" class="form-control" />
                            </div>
                            <!-- Contenedor para las opciones -->
                            <div id="optionsContainer-${questionCount}" style="display: none;">
                                <h6>Opciones:</h6>
                                <div id="options-${questionCount}"></div>
                                <button type="button" class="btn btn-outline-primary" onclick="addOption(${questionCount})">+ Agregar Opción</button>
                            </div>
                        </div>
                    `;

            document.getElementById('questionsContainer').insertAdjacentHTML('beforeend', questionHtml);

            handleQuestionTypeChange(questionCount);
        });

        function handleQuestionTypeChange(questionId) {
            const questionTypeSelect = document.getElementById(`questionType-${questionId}`);
            const correctAnswerGroup = document.getElementById(`correctAnswerGroup-${questionId}`);
            const optionsContainer = document.getElementById(`optionsContainer-${questionId}`);

            questionTypeSelect.addEventListener('change', function () {
                if (this.value === '1') {  // Si es "Normal", muestra el campo de respuesta correcta
                    correctAnswerGroup.style.display = 'block';
                    optionsContainer.style.display = 'none';
                } else if (this.value === '2') {  // Si es "Selection", muestra las opciones
                    correctAnswerGroup.style.display = 'none';
                    optionsContainer.style.display = 'block';
                }
            });

            questionTypeSelect.dispatchEvent(new Event('change')); 
        }

        function addOption(questionId) {
            optionCounts[questionId]++;

            const optionCount = optionCounts[questionId];

            const optionHtml = `
                        <div class="form-group">
                            <label for="optionText-${questionId}-${optionCount}">Opción ${optionCount}</label>
                            <input type="text" id="optionText-${questionId}-${optionCount}" name="Questions[${questionId}].Options[${optionCount}].OptionText" class="form-control" required />
                            <div class="form-check">
                                <input type="radio" id="isCorrect-${questionId}-${optionCount}" name="Questions[${questionId}].IsCorrect" class="form-check-input" value="${optionCount}">
                                <label for="isCorrect-${questionId}-${optionCount}" class="form-check-label">¿Es Correcta?</label>
                            </div>
                        </div>
                    `;

            document.getElementById(`options-${questionId}`).insertAdjacentHTML('beforeend', optionHtml);
        }

        function createExam(moduleId) {
            var formId = "#form-add-exam";
            var examData = {
                Name: $(formId + ' [name="Name"]').val(),
                CreationDate: new Date().toISOString(),
                ModuleId: moduleId,
                Questions: []
            };

            for (let i = 1; i <= questionCount; i++) {
                const questionType = parseInt($(`#questionType-${i}`).val());

                let question = {
                    QuestionText: $(`#questionText-${i}`).val(),
                    QuestionType: questionType,
                    CorrectAnswer: questionType === 1 ? $(`#correctAnswer-${i}`).val() : null,
                    Options: []
                };

                if (questionType === 2) { 
                    let selectedCorrectOption = $(`input[name="Questions[${i}].IsCorrect"]:checked`).val();
                    $(`#options-${i} .form-group`).each(function (index) {
                        question.Options.push({
                            OptionText: $(this).find(`input[name="Questions[${i}].Options[${index + 1}].OptionText"]`).val(),
                            IsCorrect: selectedCorrectOption == (index + 1)
                        });
                    });
                }

                examData.Questions.push(question);
            }

            console.log(examData);

            $.ajax({
                type: "POST",
                url: '@Url.Action("CreateExam", "Exams")',
                data: JSON.stringify(examData),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: '¡Éxito!',
                            text: response.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: response.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Error en la conexión',
                        text: 'No se pudo conectar con el servidor.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });
        }
        function confirmDelete(examId) {
            Swal.fire({
                title: '¿Estás seguro?',
                text: "No podrás revertir esto.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, eliminarlo',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: '/Exams/DeleteExam', 
                        data: { id: examId },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire(
                                    'Eliminado',
                                    response.message,
                                    'success'
                                ).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire('Error', response.message, 'error');
                            }
                        },
                        error: function () {
                            Swal.fire('Error', 'No se pudo eliminar el examen.', 'error');
                        }
                    });
                }
            });
        }
    </script>
</div>



<div class="modal fade" id="editExamModal" tabindex="-1" role="dialog" aria-labelledby="editExamModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header bg-light shadow-sm">
                <h5 class="modal-title font-weight-bold" id="editExamModalLabel">Editar Examen - @Model.Name</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body bg-white p-4">
                <form id="form-edit-exam">
                    <div class="form-group mb-4">
                        <label for="editExamName" class="font-weight-bold text-primary">Nombre del Examen</label>
                        <input id="editExamName" name="Name" type="text" class="form-control rounded-lg p-3 shadow-sm" placeholder="Escribe el nombre del examen" required />
                    </div>

                    <div id="editQuestionsContainer" class="p-3 rounded-lg bg-light shadow-sm mb-4"></div>

                    <div class="form-group text-right mb-4">
                        <button type="button" class="btn btn-success" id="addEditQuestionButton">
                            + 
                        </button>
                    </div>

                    <input type="hidden" name="ExamId" id="examId" value="" />

                    <div class="form-group text-right">
                        <button type="button" class="btn btn-primary" onclick="updateExam()">Actualizar Examen</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
        let editQuestionCount = 0;
        let editOptionCounts = {}; 
        let deletedQuestions = []; 

        function loadExamForEdit(examId) {
            $.ajax({
                type: "GET",
                url: '/Exams/GetExamDetails',
                data: { id: examId },
                success: function (response) {
                    if (response.success) {
                        $('#editExamName').val(response.data.name);
                        $('#examId').val(response.data.id);

                        $('#editQuestionsContainer').empty();
                        editQuestionCount = 0; 

                        if (Array.isArray(response.data.questions) && response.data.questions.length > 0) {
                            response.data.questions.forEach((question, index) => {
                                editQuestionCount++; 
                                editOptionCounts[editQuestionCount] = question.options ? question.options.length : 0;

                                let questionHtml = `
                                        <div class="question-group mt-3" id="editQuestion-${editQuestionCount}">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <h3>Pregunta ${editQuestionCount}</h3>
                                                <button type="button" class="btn btn-danger btn-sm" onclick="removeQuestion(${editQuestionCount}, ${question.id})">
                                                    <i class="fas fa-trash-alt"></i> Eliminar
                                                </button>
                                            </div>
                                            <div class="form-group">
                                                <label for="editQuestionText-${editQuestionCount}">Texto de la Pregunta</label>
                                                <input type="text" id="editQuestionText-${editQuestionCount}" name="Questions[${editQuestionCount}].QuestionText" class="form-control" value="${question.questionText}" required />
                                            </div>
                                            <div class="form-group">
                                                <label for="editQuestionType-${editQuestionCount}">Tipo de Pregunta</label>
                                                <select id="editQuestionType-${editQuestionCount}" name="Questions[${editQuestionCount}].QuestionType" class="form-control editQuestionTypeSelect" data-question-id="${editQuestionCount}">
                                                    <option value="1" ${question.questionType == 1 ? 'selected' : ''}>Normal</option>
                                                    <option value="2" ${question.questionType == 2 ? 'selected' : ''}>Selection</option>
                                                </select>
                                            </div>
                                            <div class="form-group edit-correct-answer-group" id="editCorrectAnswerGroup-${editQuestionCount}" style="display: ${question.questionType == 1 ? 'block' : 'none'};">
                                                <label for="editCorrectAnswer-${editQuestionCount}">Respuesta Correcta</label>
                                                <input type="text" id="editCorrectAnswer-${editQuestionCount}" name="Questions[${editQuestionCount}].CorrectAnswer" class="form-control" value="${question.correctAnswer || ''}" />
                                            </div>
                                            <div id="editOptionsContainer-${editQuestionCount}" style="display: ${question.questionType == 2 ? 'block' : 'none'};">
                                                <h6>Opciones:</h6>
                                                <div id="editOptions-${editQuestionCount}">
                                    `;

                                if (Array.isArray(question.options) && question.options.length > 0) {
                                    question.options.forEach((option, optionIndex) => {
                                        questionHtml += `
                                                <div class="form-group">
                                                    <label for="editOptionText-${editQuestionCount}-${optionIndex + 1}">Opción ${optionIndex + 1}</label>
                                                    <input type="text" id="editOptionText-${editQuestionCount}-${optionIndex + 1}" name="Questions[${editQuestionCount}].Options[${optionIndex + 1}].OptionText" class="form-control" value="${option.optionText}" required />
                                                    <div class="form-check">
                                                        <input type="radio" id="editIsCorrect-${editQuestionCount}-${optionIndex + 1}" name="Questions[${editQuestionCount}].IsCorrect" class="form-check-input" value="${optionIndex + 1}" ${option.isCorrect ? 'checked' : ''}>
                                                        <label for="editIsCorrect-${editQuestionCount}-${optionIndex + 1}" class="form-check-label">¿Es Correcta?</label>
                                                    </div>
                                                </div>
                                                <br>
                                            `;
                                    });
                                }
                                questionHtml += `
                                                </div>
                                                <button type="button" class="btn btn-outline-primary" onclick="addEditOption(${editQuestionCount})">+ Agregar Opción</button>
                                            </div>
                                        </div>
                                    `;

                                $('#editQuestionsContainer').append(questionHtml);
                                handleEditQuestionTypeChange(editQuestionCount);
                            });
                        } else {
                            $('#editQuestionsContainer').html('<p>No hay preguntas para este examen.</p>');
                        }

                        $('#editExamModal').modal('show');
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function () {
                    Swal.fire('Error', 'No se pudo cargar el examen.', 'error');
                }
            });
        }

        function removeQuestion(questionId, existingQuestionId = null) {
            if (existingQuestionId) {
                deletedQuestions.push(existingQuestionId);
            }
            document.getElementById(`editQuestion-${questionId}`).remove(); 
        }

        function handleEditQuestionTypeChange(questionId) {
            const questionTypeSelect = document.getElementById(`editQuestionType-${questionId}`);
            const correctAnswerGroup = document.getElementById(`editCorrectAnswerGroup-${questionId}`);
            const optionsContainer = document.getElementById(`editOptionsContainer-${questionId}`);

            questionTypeSelect.addEventListener('change', function () {
                if (this.value === '1') {  
                    correctAnswerGroup.style.display = 'block';
                    optionsContainer.style.display = 'none';
                } else if (this.value === '2') { 
                    correctAnswerGroup.style.display = 'none';
                    optionsContainer.style.display = 'block';
                }
            });

            questionTypeSelect.dispatchEvent(new Event('change')); 
        }

        function addEditOption(questionId) {
            editOptionCounts[questionId]++;

            const optionCount = editOptionCounts[questionId];

            const optionHtml = `
                    <div class="form-group">
                        <label for="editOptionText-${questionId}-${optionCount}">Opción ${optionCount}</label>
                        <input type="text" id="editOptionText-${questionId}-${optionCount}" name="Questions[${questionId}].Options[${optionCount}].OptionText" class="form-control" required />
                        <div class="form-check">
                            <input type="radio" id="editIsCorrect-${questionId}-${optionCount}" name="Questions[${questionId}].IsCorrect" class="form-check-input" value="${optionCount}">
                            <label for="editIsCorrect-${questionId}-${optionCount}" class="form-check-label">¿Es Correcta?</label>
                        </div>
                    </div>
                `;

            document.getElementById(`editOptions-${questionId}`).insertAdjacentHTML('beforeend', optionHtml);
        }

        // Actualizar examen
        function updateExam() {
            var formId = "#form-edit-exam";
            var examId = $('#examId').val();
            var examData = {
                Id: examId,
                Name: $(formId + ' [name="Name"]').val(),
                Questions: [],
                DeletedQuestions: deletedQuestions
            };

            for (let i = 1; i <= editQuestionCount; i++) {
                const questionText = $(`#editQuestionText-${i}`).val();

                if (typeof questionText !== 'undefined' && questionText.trim() !== "") {
                    const questionType = parseInt($(`#editQuestionType-${i}`).val());

                    let question = {
                        QuestionText: questionText.trim(),
                        QuestionType: questionType,
                        CorrectAnswer: questionType === 1 ? $(`#editCorrectAnswer-${i}`).val() : null,
                        Options: []
                    };

                    if (questionType === 2) {
                        let selectedCorrectOption = $(`input[name="Questions[${i}].IsCorrect"]:checked`).val();
                        let hasValidOptions = false;

                        $(`#editOptions-${i} .form-group`).each(function (index) {
                            const optionText = $(this).find(`input[name="Questions[${i}].Options[${index + 1}].OptionText"]`).val();

                            if (typeof optionText !== 'undefined' && optionText.trim() !== "") {
                                hasValidOptions = true;
                                question.Options.push({
                                    OptionText: optionText.trim(),
                                    IsCorrect: selectedCorrectOption == (index + 1)
                                });
                            }
                        });

                        if (!hasValidOptions) {
                            continue;
                        }
                    }
                    examData.Questions.push(question);
                }
            }

            if (examData.Questions.length === 0) {
                Swal.fire('Error', 'No puedes enviar un examen sin preguntas válidas.', 'error');
                return;
            }
            $.ajax({
                type: "POST",
                url: '/Exams/UpdateExam',
                data: JSON.stringify(examData),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: '¡Éxito!',
                            text: response.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload();
                            }
                        });
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function () {
                    Swal.fire('Error', 'No se pudo actualizar el examen.', 'error');
                }
            });
        }

        document.getElementById('addEditQuestionButton').addEventListener('click', function () {
            editQuestionCount++;
            editOptionCounts[editQuestionCount] = 0;

            const questionHtml = `
                <div class="question-section" id="editQuestion-${editQuestionCount}">
                    <h1>Pregunta ${editQuestionCount}</h1>
                    <div class="form-group">
                        <label for="editQuestionText-${editQuestionCount}">Texto de la Pregunta</label>
                        <input type="text" id="editQuestionText-${editQuestionCount}" name="Questions[${editQuestionCount}].QuestionText" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="editQuestionType-${editQuestionCount}">Tipo de Pregunta</label>
                        <select id="editQuestionType-${editQuestionCount}" name="Questions[${editQuestionCount}].QuestionType" class="form-control editQuestionTypeSelect" data-question-id="${editQuestionCount}">
                            <option value="1">Normal</option>
                            <option value="2">Selection</option>
                        </select>
                    </div>
                    <div class="form-group edit-correct-answer-group" id="editCorrectAnswerGroup-${editQuestionCount}" style="display: none;">
                        <label for="editCorrectAnswer-${editQuestionCount}">Respuesta Correcta</label>
                        <input type="text" id="editCorrectAnswer-${editQuestionCount}" name="Questions[${editQuestionCount}].CorrectAnswer" class="form-control" />
                    </div>
                    <div id="editOptionsContainer-${editQuestionCount}" style="display: none;">
                        <h6>Opciones:</h6>
                        <div id="editOptions-${editQuestionCount}"></div>
                        <button type="button" class="btn btn-outline-primary" onclick="addEditOption(${editQuestionCount})">+ Agregar Opción</button>
                    </div>
                </div>
            `;

            $('#editQuestionsContainer').append(questionHtml);
            handleEditQuestionTypeChange(editQuestionCount);
        });
    </script>
</div>

<script>
    <style>
        .modal - content {
        border - radius: 15px;
        overflow: hidden;
        box - shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

        .modal - header {
        border - bottom: none;
    }

        .modal - title {
        font - size: 1.5rem;
        color: #333;
    }

        .form - group label {
        font - size: 1rem;
        color: #555;
    }

        .form - control {
        font - size: 1.1rem;
        padding: 15px;
        border - radius: 10px;
        border: 1px solid #ccc;
        transition: all 0.3s;
    }

        .form - control:focus {
        border - color: #5e72e4;
        box - shadow: 0 0 10px rgba(94, 114, 228, 0.5);
    }

    #editQuestionsContainer {
        background - color: #f8f9fa;
        padding: 20px;
        border - radius: 10px;
        min - height: 100px;
    }

        /* Botones de acción */
        .btn {
        font - size: 1rem;
        padding: 10px 20px;
        border - radius: 8px;
    }

        .btn - primary {
        background - color: #5e72e4;
        border: none;
        transition: background - color 0.3s ease;
    }

        .btn - primary:hover {
        background - color: #324cdd;
    }

        .btn - success {
        background - color: #2dce89;
        border: none;
        transition: background - color 0.3s ease;
    }

        .btn - success:hover {
        background - color: #24b47e;
    }

        .question - group {
        margin - bottom: 30px;
        border - bottom: 1px solid #ddd;
        padding - bottom: 20px;
    }

        .question - group h6 {
        font - size: 1.2rem;
        margin - bottom: 15px;
        color: #444;
    }

        .question - group label {
        font - size: 1rem;
        font - weight: 500;
        color: #666;
    }

        .question - group.form - control {
        font - size: 1rem;
        padding: 10px;
    }

        .question - group.btn - outline - primary {
        margin - top: 15px;
    }
    </style>
</script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
